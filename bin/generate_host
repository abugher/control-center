#!/bin/bash
# Depends on:
# - gawk

function main() {
  generate_root_password
  generate_ssl_material
  generate_ssh_host_keys
  generate_ssh_root_keys
  set_groups
  set_host_vars
  # Deploy image, including generated material such as IP address, then boot.
  wait_for_host
  set_mac
  deploy_roles
  admonish
}


function generate_root_password() {
  if ! pass show "${pass_user}/${target}/root" >/dev/null; then
    output "Generating root password."
    dicelessware/dw 5 | pass add -m \
      || fail "Failed to generate root password."
  fi

  output "Generated root password."
}


function generate_ssl_material() {
  cd "${control_center}/certificate_authority" \
    || fail "Failed to change directory to certificate authority directory."
  ./bin/generate "${target}" \
    || fail "Failed to generate SSL material."

  output "Generated SSL material."
}


function generate_ssh_host_keys() {
  if test -f "${ssh_host_private_key}" && test -f "${ssh_host_public_key}"; then
    output "SSH host keys already exist."
    return 0
  fi

  for key in "${ssh_host_private_key}" "${ssh_host_public_key}" "${ssh_host_public_key_unmoved}"; do
    if test -e "${key}"; then
      rm -f "${key}" \
        || fail "Failed to remove stale SSH key:  ${key}"
      output "Removed stale SSH key:  ${key}"
    fi
  done

  cd "${control_center}/sensitive_ansible/inventory/hosts" \
    || fail "Failed to change directory to the sensitive inventory of hosts directory."
  mkdir -p "${target}/files/ssh_keys" \
    || fail "Failed to create directory for SSH private host key."
  cd "${target}/files/ssh_keys" \
    || fail "Failed to change directory to directory for SSH private host key."
  ssh-keygen -t rsa -b 4096 -C '' -f "${ssh_host_private_key}" < /dev/null \
    || fail "Failed to generate SSH host keys."

  cd "${control_center}/ansible/inventory/hosts" \
    || fail "Failed to change directory to the inventory of hosts directory."
  mkdir -p "${target}/files/ssh_keys" \
    || fail "Failed to create directory for SSH public host key."
  cd "${target}/files/ssh_keys" \
    || fail "Failed to change directory to directory for SSH public host key."
  mv "${ssh_host_public_key_unmoved}" "${ssh_host_public_key}" \
    || fail "Failed to move public host key."

  output "Generated SSH host keys."

  if test -f "${ssh_root_private_key}" && test -f "${ssh_root_public_key}"; then
    output "SSH root keys already exist."
    return 0
  fi

  for key in "${ssh_root_private_key}" "${ssh_root_public_key}" "${ssh_root_public_key_unmoved}"; do
    if test -e "${key}"; then
      rm -f "${key}" \
        || fail "Failed to remove stale SSH key:  ${key}"
      output "Removed stale SSH key:  ${key}"
    fi
  done
}


function generate_ssh_root_keys() {
  if test -f "${ssh_root_private_key}" && test -f "${ssh_root_public_key}"; then
    output "SSH root keys already exist."
    return 0
  fi

  for key in "${ssh_root_private_key}" "${ssh_root_public_key}" "${ssh_root_public_key_unmoved}"; do
    if test -e "${key}"; then
      rm -f "${key}" \
        || fail "Failed to remove stale SSH key:  ${key}"
      output "Removed stale SSH key:  ${key}"
    fi
  done

  cd "${control_center}/sensitive_ansible/inventory/hosts" \
    || fail "Failed to change directory to the sensitive inventory of hosts directory."
  mkdir -p "${target}/users/root/files/ssh_keys" \
    || fail "Failed to create directory for SSH private root key."
  cd "${target}/users/root/files/ssh_keys" \
    || fail "Failed to change directory to directory for SSH private root key."
  ssh-keygen -t rsa -b 4096 -C "root@${target}.${domain}" -f "${ssh_root_private_key}" < /dev/null \
    || fail "Failed to generate SSH root keys."

  cd "${control_center}/ansible/inventory/hosts" \
    || fail "Failed to change directory to the inventory of hosts directory."
  mkdir -p "${target}/users/root/files/ssh_keys" \
    || fail "Failed to create directory for SSH public root key."
  cd "${target}/users/root/files/ssh_keys" \
    || fail "Failed to change directory to directory for SSH public root key."
  mv "${ssh_root_public_key_unmoved}" "${ssh_root_public_key}" \
    || fail "Failed to move public root key."

  output "Generated SSH root keys."
}


function set_groups() {
  for group in "${groups[@]}"; do
    group_file="${control_center}/ansible/inventory/inventory.d/${group}"
    test -f "${group_file}" \
      || fail "No group file found for group:  ${group}"
    if grep -q "^${target}$" "${group_file}"; then
      continue
    fi
    echo "${target}" >> "${group_file}" \
      || fail "Failed to append host name to group file for group:  ${group}"
    output "Joined group:  ${group}"
  done
  output "Group membership is set."
}


function set_host_vars() {
  if ! test -f "${host_vars_file}"; then
    touch "${host_vars_file}" \
      || fail "Failed to create host vars file."
  fi
  if ! grep -qE '^ip_address:[[:blank:]]+'"'${ip_address_network_segment_regex}"'\.' "${host_vars_file}"; then
    ip_address="$(allocate_ip_address)"
    echo "ip_address:  '${ip_address}'" >> "${host_vars_file}" \
      || fail "Failed to write IP address to host vars file."
  fi
  if ! grep -qE '^ssh_unique_port:' "${host_vars_file}"; then
    unique_ssh_port="$(allocate_unique_ssh_port)"
    echo "ssh_unique_port:  '${ssh_unique_port}'" >> "${host_vars_file}" \
      || fail "Failed to write SSH unique port to host vars file."
  fi
  if ! grep -qE '^known_host:' "${host_vars_file}"; then
    known_host="$(cat "${ssh_host_public_key}")"
    echo "known_host: '${known_host}'" >> "${host_vars_file}" \
      || fail "Failed to write known host line to host vars file."
  fi
  if ! grep -qE '^reboot_hour:' "${host_vars_file}"; then
    reboot_hours=( 
      $(
        awk '/reboot_hour/ {print $2}' \
          "${control_center}"/ansible/inventory/inventory.d/host_vars/*.yml \
          | sed "s/'//g" \
          | sort
      ) 
    )
    unset reboot_hour
    for hour in {00..23}; do
      if ! grep -q "${hour}" <<< "${reboot_hours[@]}"; then
        reboot_hour="${hour}"
        break
      fi
    done
    if ! test 'set' = "${reboot_hour:+set}"; then
      fail "Failed to allocate a reboot hour."
    fi
    echo "reboot_hour: '${reboot_hour}'" >> "${host_vars_file}" \
      || fail "Failed to write reboot hour to host vars file."
  fi
  if ! grep -qE '^reboot_hour:' "${host_vars_file}"; then
    reboot_minute='00'
    echo "reboot_minute: '${reboot_minute}'" >> "${host_vars_file}" \
      || fail "Failed to write reboot minute to host vars file."
  fi
  if ! grep -qE '^update_hour:' "${host_vars_file}"; then
    update_hour="$(
      printf '%02d' "$((
        reboot_hour + 2
      ))"
    )"
    echo "update_hour: '${update_hour}'" >> "${host_vars_file}" \
      || fail "Failed to write update hour to host vars file."
  fi
  if ! grep -qE '^update_minute:' "${host_vars_file}"; then
    update_minute='00'
    echo "update_minute: '${update_minute}'" >> "${host_vars_file}" \
      || fail "Failed to write update minute to host vars file."
  fi
  if ! grep -qE '^notify:' "${host_vars_file}"; then
    echo "notify: 'yes'" >> "${host_vars_file}" \
      || fail "Failed to write notify line to host vars file."
  fi
  output "Host vars are set (except for MAC address)."
}


function allocate_ip_address() {
  cd "${control_center}/ansible/inventory/inventory.d/host_vars/" \
    || fail "Failed to change directory to host vars directory."

  ls -d *.yml >/dev/null 2>&1 \
    || fail "Failed to find existing host vars files."
  
  last_ip_address_host_segment="$(
    gawk \
      -F "[.]" \
      '/^ip_address:[[:blank:]]+'"'{0,1}${ip_address_network_segment_regex}"'\./ {print $4}' \
      *.yml \
      | sed "s/'//" \
      | sort \
      | tail -n 1
  )"

  grep -qE '^[0-9]+$' <<< "${last_ip_address_host_segment}" \
    || fail "Invalid highest known IP address host segment:  ${last_ip_address_host_segment}"

  test "${last_ip_address_host_segment}" -ge "${ip_address_host_segment_min}" \
    || fail "Highest known IP address host segment is below spec."

  ip_address_host_segment="$(( last_ip_address_host_segment + 1 ))" \
    || fail "Failed to generate IP address host segment."

  test "${ip_address_host_segment}" -le "${ip_address_host_segment_max}" \
    || fail "IP address host segment is above spec."

  echo "${ip_address_network_segment}.${ip_address_host_segment}"
}


function allocate_unique_ssh_port() {
  cd "${control_center}/ansible/inventory/inventory.d/host_vars/" \
    || fail "Failed to change directory to host vars directory."

  ls -d *.yml >/dev/null 2>&1 \
    || fail "Failed to find existing host vars files."

  last_ssh_unique_port="$(
    gawk \
      '/^ssh_unique_port:/ {print $2}' \
      *.yml \
      | sed "s/'//g" \
      | sort \
      | tail -n 1
  )"

  grep -qE '^[0-9]+$' <<< "${last_ssh_unique_port}" \
    fail "Invalid highest known SSH unique port:  ${last_ssh_unique_port}"

  test "${last_ssh_unique_port}" -ge "${ssh_unique_port_min}" \
    || fail "Highest known SSH unique port is below spec."

  ssh_unique_port="$(( last_ssh_unique_port + 1 ))"

  test "${ssh_unique_port}" -le "${ssh_unique_port_max}" \
    || fail "SSH unique port is above spec."

  echo "${ssh_unique_port}"
}


function wait_for_host() {
  output "Unique host material (IP address, root password, etc) has been generated."
  output "Deploy an OS image and boot the host."
  output "Waiting for host to ping:  ${target}"
  while ! ping -qc 1 "${target}" > /dev/null 2>&1; do
    echo -n '.'
    sleep 10
  done
  echo
  output "Waiting for host to respond to SSH:  ${target}"
  # This will go off the rails if the SSH service is up but misconfigured.
  while ! ssh -p 22 -o PasswordAuthentication=no "root@${target}" whoami > /dev/null 2>&1; do
    if ssh -o PasswordAuthentication=no "ansible@${target}" whoami > /dev/null 2>&1; then
      break
    fi
    echo -n '.'
    sleep 10
  done
  echo
  output "Host is up:  ${target}"
}


function gather_mac_address() {
  mac_address="$(
    ssh "root@${target}" ip addr \
      | grep -v LOOPBACK \
      | grep -A 1 UP \
      | tail -n 1 \
      | awk '{print $2}'
  )" \
    || fail "Failed to gather MAC address."

  if ! grep -qE '^[0-9a-f]{2}:[0-9a-f]{2}:[0-9a-f]{2}:[0-9a-f]{2}:[0-9a-f]{2}:[0-9a-f]{2}$' <<< "${mac_address}"; then
    fail "Invalid MAC address:  '${mac_address}'"
  fi

  echo "${mac_address}"
}


function set_mac() {
  if ! grep -qE '^mac_address:' "${host_vars_file}"; then
    mac_address="$(gather_mac_address)"
    echo "mac_address:  '${mac_address}'" >> "${host_vars_file}" \
      || fail "Failed to write MAC address to host vars file."
  fi
  output "MAC address is set in host vars file."
}


function deploy_roles() {
  cd "${control_center}/ansible" \
    || fail "Failed to enter ansible directory."
  ./bin/deploy_role_to_localhost ansible_master -e ansible_become_pass="$(pass show "${USER}/${HOSTNAME}/${USER}")" \
    || fail "Failed to deploy role ansible_master to localhost."
  if ! ssh "ansible@${target}" whoami >/dev/null 2>&1; then
    ./bin/deploy_role_as_user_to_hosts ansible_target root "${target}" -e ansible_port=22 \
      || fail "Failed to deploy role ansible_target to:  ${target}"
  fi
  ./bin/deploy_role_to_hosts automatic_updates "${target}" -e ansible_port=22 \
    || fail "Failed to deploy role sshd to:  ${target}"
  ./bin/deploy_role_to_hosts sshd "${target}" -e ansible_port=22 \
    || fail "Failed to deploy role sshd to:  ${target}"
  ./bin/deploy_host "${target}" \
    || fail "Failed to deploy all assigned roles to:  ${target}"
  for role in dns_internal dhcp-server nagios ansible_master; do
    ./bin/deploy_role "${role}" \
      || fail "Failed to deploy role:  ${role}"
  done
  output "Deployed ansible roles."
}


function admonish() {
  output "Deployment is complete.  Don't forget:"
  output "  - Forward the unique SSH port on the NAT gateway."
}


function output() {
  printf "${script_name}: %s\\n" "${1}"
}


function fail() {
  printf "${script_name}: ERROR:  %s\\n" "${1}" >&2
  exit "${2:-1}"
}


if test 'set' = "${1:+set}"; then
  target="${1}"
else
  read -p "Target host name:  " target
fi
if ! grep -qE '^[a-z-]+$' <<< "${target}"; then
  fail "Invalid target:  '${target}'"
fi

pass_user="${USER}"
script_name="${0##*/}"
control_center="$(readlink -f "${0%/*}/..")" \
  || fail "Failed to get absolute path of control center."
host_vars_file="${control_center}/ansible/inventory/inventory.d/host_vars/${target}.yml"
ssh_host_private_key="${control_center}/sensitive_ansible/inventory/hosts/${target}/files/ssh_keys/ssh_host_rsa_key"
ssh_host_public_key="${control_center}/ansible/inventory/hosts/${target}/files/ssh_keys/ssh_host_rsa_key.pub"
ssh_host_public_key_unmoved="${control_center}/sensitive_ansible/inventory/hosts/${target}/files/ssh_keys/ssh_host_rsa_key.pub"
ssh_root_private_key="${control_center}/sensitive_ansible/inventory/hosts/${target}/users/root/files/ssh_keys/id_rsa"
ssh_root_public_key="${control_center}/ansible/inventory/hosts/${target}/users/root/files/ssh_keys/id_rsa.pub"
ssh_root_public_key_unmoved="${control_center}/sensitive_ansible/inventory/hosts/${target}/users/root/files/ssh_keys/id_rsa.pub"
domain='neuronpointer.net'
ip_address_network_segment='192.168.11'
ip_address_network_segment_regex="$(sed 's/\./\\\./g' <<< "${ip_address_network_segment}")"
ip_address_host_segment_min=50
ip_address_host_segment_max=99


groups=(
  'ansible_target'
  'monitored'
  'dhcp-clients'
  'internal-dns-targets'
  'syslog_client'
  'automatic_updates'
  'server'
  'host_list'
  'sshd'
)

time main
